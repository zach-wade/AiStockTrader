# File: events/event_types.py

"""
Event type definitions for the AI Trader event-driven architecture.

This module defines the core event types, event classes, and alert types
used throughout the system for asynchronous communication between components.
"""

from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Dict, Any, Optional, List

# Import base types from interfaces to extend them
from main.interfaces.events import (
    Event,
    EventType,
    MarketEvent,
    OrderEvent,
    ScannerAlertEvent,
    FeatureRequestEvent,
    FeatureComputedEvent,
    ErrorEvent,
    EventPriority,
)
from main.interfaces.events.time_utils import ensure_utc


# Additional event types specific to this module
# (core types are imported from interfaces)
class ExtendedEventType(Enum):
    """
    Additional event types specific to the events module.
    These extend the core EventType from interfaces.
    """
    # System events
    SYSTEM_STARTUP = "system_startup"
    SYSTEM_SHUTDOWN = "system_shutdown"
    
    # Model events
    MODEL_PREDICTION = "model_prediction"
    MODEL_RETRAIN_REQUEST = "model_retrain_request"
    
    # Risk events
    CIRCUIT_BREAKER_TRIGGERED = "circuit_breaker_triggered"
    
    # Stream processing events
    STREAM_DATA = "stream_data"
    TRADING_SIGNAL = "trading_signal"
    
    # Position events
    POSITION_UPDATE = "position_update"


class AlertType(Enum):
    """
    Types of alerts that can be generated by scanners.
    """
    # Price-based alerts
    PRICE_BREAKOUT = "price_breakout"
    PRICE_REVERSAL = "price_reversal"
    SUPPORT_RESISTANCE = "support_resistance"
    
    # Volume alerts
    VOLUME_SPIKE = "volume_spike"
    UNUSUAL_ACTIVITY = "unusual_activity"
    
    # Technical alerts
    TECHNICAL_SIGNAL = "technical_signal"
    MOMENTUM_SHIFT = "momentum_shift"
    TREND_CHANGE = "trend_change"
    
    # Sentiment alerts
    SENTIMENT_SPIKE = "sentiment_spike"
    NEWS_CATALYST = "news_catalyst"
    SOCIAL_BUZZ = "social_buzz"
    
    # Market structure
    CORRELATION_BREAK = "correlation_break"
    SECTOR_ROTATION = "sector_rotation"
    INTERMARKET_SIGNAL = "intermarket_signal"
    
    # Options flow
    OPTIONS_FLOW = "options_flow"
    UNUSUAL_OPTIONS = "unusual_options"
    
    # Corporate actions
    INSIDER_ACTIVITY = "insider_activity"
    INSIDER_BUYING = "insider_buying"
    EARNINGS_SURPRISE = "earnings_surprise"
    EARNINGS_ANNOUNCEMENT = "earnings_announcement"
    
    # Advanced analysis
    COORDINATED_ACTIVITY = "coordinated_activity"
    DIVERGENCE = "divergence"
    REGIME_CHANGE = "regime_change"
    CORRELATION_ANOMALY = "correlation_anomaly"
    
    # Technical patterns
    TECHNICAL_BREAKOUT = "technical_breakout"
    
    # Social media specific
    SOCIAL_SENTIMENT = "social_sentiment"
    SOCIAL_VOLUME = "social_volume"
    SOCIAL_VIRAL = "social_viral"
    SENTIMENT_SURGE = "sentiment_surge"
    
    # General
    MOMENTUM = "momentum"


# Event base class is now imported from interfaces
# We'll add module-specific extensions here if needed


@dataclass
class ScanAlert:
    """
    Alert generated by scanners indicating a trading opportunity.
    
    Attributes:
        symbol: Trading symbol
        alert_type: Type of alert
        timestamp: When the alert was generated
        score: Confidence score (0-1)
        message: Human-readable alert description
        metadata: Additional alert-specific data
        source_scanner: Scanner that generated the alert
        priority: Alert priority level
    """
    symbol: str
    alert_type: AlertType
    timestamp: datetime
    score: float
    message: str
    metadata: Dict[str, Any] = field(default_factory=dict)
    source_scanner: str = "unknown"
    priority: int = 0
    
    def __post_init__(self):
        """Ensure timestamp is UTC."""
        self.timestamp = ensure_utc(self.timestamp)
        # Validate score
        if not 0 <= self.score <= 1:
            raise ValueError(f"Score must be between 0 and 1, got {self.score}")


# ScannerAlertEvent is imported from interfaces
# We can extend it here with additional functionality if needed

@dataclass
class ExtendedScannerAlertEvent(ScannerAlertEvent):
    """
    Extended scanner alert event with additional fields.
    """
    alerts: List[ScanAlert] = field(default_factory=list)
    scan_duration_ms: Optional[float] = None
    symbols_scanned: Optional[int] = None
    
    def __post_init__(self):
        """Initialize extended fields."""
        # Call parent init if needed
        if hasattr(super(), '__post_init__'):
            super().__post_init__()
        
        # Add summary to metadata
        self.metadata.update({
            "alert_count": len(self.alerts),
            "scan_duration_ms": self.scan_duration_ms,
            "symbols_scanned": self.symbols_scanned,
            "alert_symbols": list(set(alert.symbol for alert in self.alerts))
        })


# FeatureRequestEvent is imported from interfaces
# Additional module-specific feature request functionality can be added here


# FeatureComputedEvent is imported from interfaces  
# Additional module-specific feature computed functionality can be added here


# ErrorEvent is imported from interfaces
# Additional module-specific error functionality can be added here


# OrderEvent and MarketEvent are imported from interfaces
# FillEvent is specific to this module

@dataclass
class FillEvent(Event):
    """Event representing an order fill."""
    symbol: str = ""
    exchange: str = ""
    quantity: int = 0
    direction: str = ""
    fill_cost: float = 0.0
    commission: Optional[float] = None
    
    def __post_init__(self):
        self.event_type = EventType.ORDER_FILLED
        self.source = "execution_engine"


@dataclass
class RiskEvent(Event):
    """Event for risk management notifications."""
    risk_type: str = ""
    severity: str = ""
    symbol: str = ""
    message: str = ""
    metrics: Dict[str, Any] = field(default_factory=dict)
    
    def __post_init__(self):
        self.event_type = EventType.RISK_ALERT
        self.source = "risk_manager"


@dataclass
class PositionEvent(Event):
    """Event for position updates."""
    symbol: str = ""
    quantity: int = 0
    avg_price: float = 0.0
    current_price: float = 0.0
    pnl: float = 0.0
    pnl_percent: float = 0.0
    position_value: float = 0.0
    
    def __post_init__(self):
        self.event_type = ExtendedEventType.POSITION_UPDATE
        self.source = "position_manager"