# Data Lifecycle Configuration
# Manages the automated movement of data between hot and cold storage tiers

lifecycle:
  # Hot storage configuration (PostgreSQL)
  hot_storage:
    retention_days: 30  # Keep last 30 days in database for fast access
    max_retention_days: 90  # Maximum days to keep even if not accessed
    
  # Cold storage configuration (Data Lake/Parquet)
  cold_storage:
    compression: snappy  # Parquet compression: snappy, gzip, lz4, zstd
    partition_by: 
      - year
      - month
    file_size_target_mb: 100  # Target size for parquet files
    
  # Archiving settings
  archiving:
    batch_size: 10000  # Records per batch during archiving
    parallel_workers: 4  # Number of parallel archiving workers
    verify_archives: true  # Verify data integrity after archiving
    delete_after_verify: true  # Remove from hot storage after successful archive
    
  # Scheduling
  schedule:
    enabled: true
    run_time: "02:00"  # Run at 2 AM daily
    run_days: [0, 1, 2, 3, 4, 5, 6]  # Run every day (0=Monday, 6=Sunday)
    skip_market_hours: true  # Don't run during market hours
    
  # Restore settings
  restore:
    max_concurrent_restores: 2  # Limit concurrent restore operations
    chunk_size: 50000  # Records per chunk when restoring
    
  # Monitoring and alerts
  monitoring:
    alert_on_failure: true
    alert_on_long_duration: true  # Alert if lifecycle run takes too long
    max_duration_minutes: 120  # Maximum expected duration
    metrics_enabled: true
    
  # Data tiers (for future expansion)
  tiers:
    - name: hot
      storage: postgresql
      retention_days: 30
      access_pattern: "random"
      
    - name: warm  # Future enhancement
      storage: postgresql_partitioned
      retention_days: 90
      access_pattern: "sequential"
      
    - name: cold
      storage: parquet
      retention_days: 3650  # 10 years
      access_pattern: "batch"
      
    - name: archive  # Future enhancement
      storage: glacier
      retention_days: -1  # Indefinite
      access_pattern: "rare"