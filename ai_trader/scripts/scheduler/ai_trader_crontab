# AI Trading System - Cron Job Definitions
# Generated from job_definitions.yaml
# Install with: crontab ai_trader_crontab
#
# IMPORTANT: Update TRADER_HOME path below to your actual installation directory
# IMPORTANT: Update EMAIL address for notifications

# Environment Variables
TRADER_HOME=/path/to/ai_trader
PYTHON_ENV=$TRADER_HOME/venv/bin/python
LOG_DIR=$TRADER_HOME/logs/scheduled_jobs
EMAIL=admin@localhost

# Timezone: US/Eastern (cron runs in system timezone)
TZ=US/Eastern

# =============================================================================
# PRE-MARKET JOBS (4:00 - 9:30 AM ET)
# =============================================================================

# 4:00 AM - Premarket data collection (Mon-Fri)
0 4 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/app/run_data_pipeline.py --mode=premarket --sources=alpaca,polygon,yahoo >> $LOG_DIR/premarket_data.log 2>&1

# 4:15 AM - Economic calendar update (Mon-Fri)  
15 4 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/data_pipeline/historical/data_fetcher.py --data-type=economic_calendar --lookforward=7 >> $LOG_DIR/economic_calendar.log 2>&1

# 4:30 AM - Overnight news analysis (Mon-Fri)
30 4 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/feature_pipeline/calculators/news_features.py --timeframe=overnight --sentiment-analysis=true >> $LOG_DIR/news_analysis.log 2>&1

# 5:00 AM - Model inference for premarket (Mon-Fri)
0 5 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/models/inference/prediction_engine.py --mode=premarket --generate-signals=true >> $LOG_DIR/model_inference.log 2>&1

# 2:45 AM - Refresh scanner qualifications for data retention (Mon-Fri)
# This runs after Layer 1 scanner (2:30 AM) to update symbol qualifications
45 2 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/scripts/refresh_scanner_qualifications.py >> $LOG_DIR/scanner_qualification_refresh.log 2>&1

# 6:00 AM - Daily risk assessment (Mon-Fri)
0 6 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/risk_management/pre_trade/unified_limit_checker.py --assessment=daily --update-limits=true >> $LOG_DIR/risk_assessment.log 2>&1

# 6:15 AM - Pre-market system health check (Mon-Fri)
15 6 * * 1-5 cd $TRADER_HOME && ./deployment/scripts/health_check.sh >> $LOG_DIR/health_check.log 2>&1

# =============================================================================
# MARKET HOURS JOBS (9:30 AM - 4:00 PM ET)
# =============================================================================

# Every 5 minutes - Market hours monitoring (Mon-Fri, 9:30 AM - 4:00 PM)
*/5 9-16 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/monitoring/health_reporter.py --mode=realtime --capture-snapshot=true >> $LOG_DIR/market_monitoring.log 2>&1

# Every minute - Real-time data ingestion (Mon-Fri, 9:30 AM - 4:00 PM)  
*/1 9-16 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/data_pipeline/stream_processor.py --mode=realtime --symbols=universe >> $LOG_DIR/realtime_data.log 2>&1

# Every 5 minutes - Real-time feature calculation (Mon-Fri, 9:30 AM - 4:00 PM)
*/5 9-16 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/feature_pipeline/unified_feature_engine.py --mode=realtime --incremental=true >> $LOG_DIR/realtime_features.log 2>&1

# Every 10 minutes - Trading signal updates (Mon-Fri, 9:30 AM - 4:00 PM)
*/10 9-16 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/models/inference/prediction_engine.py --mode=realtime --update-signals=true >> $LOG_DIR/trading_signals.log 2>&1

# Every 2 minutes - Real-time risk monitoring (Mon-Fri, 9:30 AM - 4:00 PM)
*/2 9-16 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/risk_management/real_time/live_risk_monitor.py --continuous=true --alert-threshold=0.8 >> $LOG_DIR/risk_monitoring.log 2>&1

# =============================================================================
# POST-MARKET JOBS (4:00 - 8:00 PM ET)
# =============================================================================

# 4:15 PM - End-of-day reconciliation (Mon-Fri)
15 16 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/trading_engine/core/portfolio_manager.py --reconcile=eod --generate-report=true >> $LOG_DIR/eod_reconciliation.log 2>&1

# 4:30 PM - Daily performance analysis (Mon-Fri)
30 16 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/backtesting/analysis/performance_metrics.py --analysis=daily --include-attribution=true >> $LOG_DIR/daily_performance.log 2>&1

# 5:00 PM - Data archival and cleanup (Mon-Fri)
0 17 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/data_pipeline/storage/archive.py --archive=daily --compress=true --cleanup=true >> $LOG_DIR/data_archival.log 2>&1

# 6:00 PM - Daily health report (Mon-Fri)
0 18 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/monitoring/health_reporter.py --report=daily --email=true >> $LOG_DIR/daily_health_report.log 2>&1

# =============================================================================
# OVERNIGHT JOBS (8:00 PM - 4:00 AM ET)
# =============================================================================

# 8:00 PM - Database maintenance (Mon-Fri)
0 20 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/data_pipeline/storage/database_adapter.py --maintenance=full --optimize=true --vacuum=true >> $LOG_DIR/database_maintenance.log 2>&1

# 8:30 PM - Log rotation and cleanup (Mon-Fri)
30 20 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV scripts/maintenance/compress_cache.py --rotate-logs=true --cleanup-old=true --days=30 >> $LOG_DIR/log_rotation.log 2>&1

# 9:00 PM - Model retraining check (Mon-Fri)
0 21 * * 1-5 cd $TRADER_HOME && $PYTHON_ENV src/main/models/training/training_orchestrator.py --check-retraining=true --auto-retrain=false >> $LOG_DIR/model_retraining_check.log 2>&1

# 10:00 PM - System backup (Mon-Fri)
0 22 * * 1-5 cd $TRADER_HOME && ./deployment/scripts/deploy.sh --backup-only=true --incremental=true >> $LOG_DIR/system_backup.log 2>&1

# 11:00 PM - Overnight health monitoring (Every day)
0 23 * * * cd $TRADER_HOME && $PYTHON_ENV src/main/monitoring/health_reporter.py --report=overnight --capture-metrics=true >> $LOG_DIR/overnight_monitoring.log 2>&1

# =============================================================================
# WEEKLY JOBS
# =============================================================================

# Monday 7:00 AM - Weekly performance report
0 7 * * 1 cd $TRADER_HOME && $PYTHON_ENV src/main/monitoring/health_reporter.py --report=weekly --email=true --detailed=true >> $LOG_DIR/weekly_report.log 2>&1

# Sunday 7:00 PM - Weekly model performance evaluation
0 19 * * 0 cd $TRADER_HOME && $PYTHON_ENV src/main/models/monitoring/model_monitor.py --evaluation=weekly --generate-report=true >> $LOG_DIR/weekly_model_eval.log 2>&1

# Sunday 7:30 PM - Strategy affinity update
30 19 * * 0 cd $TRADER_HOME && $PYTHON_ENV src/main/scanners/layers/layer1_5_strategy_affinity.py --update=weekly --recalculate=true >> $LOG_DIR/strategy_affinity.log 2>&1

# Sunday 11:00 PM - Full weekly backup
0 23 * * 0 cd $TRADER_HOME && ./deployment/scripts/deploy.sh --backup-only=true --full-backup=true >> $LOG_DIR/weekly_backup.log 2>&1

# =============================================================================
# MONTHLY JOBS
# =============================================================================

# 1st of month 8:00 AM - Monthly performance analysis
0 8 1 * * cd $TRADER_HOME && $PYTHON_ENV src/main/monitoring/health_reporter.py --report=monthly --comprehensive=true --email=true >> $LOG_DIR/monthly_report.log 2>&1

# 1st of month 9:00 PM - Monthly system optimization
0 21 1 * * cd $TRADER_HOME && $PYTHON_ENV scripts/maintenance/compress_cache.py --optimize=full --defragment=true --cleanup=aggressive >> $LOG_DIR/monthly_optimization.log 2>&1

# =============================================================================
# LOG ROTATION AND MAINTENANCE
# =============================================================================

# Daily log rotation at 2:00 AM
0 2 * * * /usr/sbin/logrotate -s $LOG_DIR/logrotate.status $TRADER_HOME/scripts/scheduler/logrotate.conf

# Weekly cleanup of old logs (keep 30 days)
0 3 * * 0 find $LOG_DIR -name "*.log" -mtime +30 -delete

# =============================================================================
# INSTALLATION INSTRUCTIONS
# =============================================================================

# To install this crontab:
# 1. Update TRADER_HOME path above to your actual installation directory
# 2. Update EMAIL address for notifications
# 3. Install with: crontab ai_trader_crontab
# 4. Verify with: crontab -l
# 5. Check logs in $LOG_DIR for job execution status

# To remove all jobs:
# crontab -r

# To edit existing crontab:
# crontab -e

# IMPORTANT NOTES:
# - All times are in the system timezone
# - Ensure AI Trading System environment is properly configured
# - Monitor logs regularly for job execution status
# - Consider using the master_scheduler.py for more advanced scheduling needs
# - Some jobs may need adjustment based on your specific setup

# =============================================================================
# HOLIDAY HANDLING
# =============================================================================

# Note: Cron doesn't natively handle market holidays
# For holiday-aware scheduling, use master_scheduler.py instead
# Or add custom scripts to check for holidays before execution

# US Market Holidays 2025 (disable jobs on these dates manually if needed):
# - 2025-01-01 (New Year's Day)
# - 2025-01-20 (MLK Day)  
# - 2025-02-17 (Presidents Day)
# - 2025-05-26 (Memorial Day)
# - 2025-07-04 (Independence Day)
# - 2025-09-01 (Labor Day)
# - 2025-11-27 (Thanksgiving)
# - 2025-12-25 (Christmas)