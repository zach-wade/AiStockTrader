---
name: Paper Trading Validation

'on':
  schedule:
    # Run at 9 AM and 3 PM EST on weekdays (market hours)
    - cron: '0 14 * * 1-5'  # 9 AM EST
    - cron: '0 20 * * 1-5'  # 3 PM EST
  workflow_dispatch:
    inputs:
      iterations:
        description: 'Number of trading iterations'
        required: false
        default: '10'
      symbols:
        description: 'Comma-separated list of symbols to trade'
        required: false
        default: 'AAPL,MSFT,GOOGL,AMZN,META'

jobs:
  paper-trading-test:
    name: Paper Trading Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      # These will be set from GitHub secrets
      ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
      ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
      ALPACA_BASE_URL: https://paper-api.alpaca.markets
      POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Verify Environment
        run: |
          echo "### 🔐 Environment Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          python -c "
          import os

          required_vars = ['ALPACA_API_KEY', 'ALPACA_SECRET_KEY', 'ALPACA_BASE_URL']
          missing = []

          for var in required_vars:
              if not os.environ.get(var):
                  missing.append(var)
              else:
                  print(f'✅ {var} is set')

          if missing:
              print(f'❌ Missing environment variables: {missing}')
              exit(1)

          print('✅ All required environment variables are set')
          "

          echo "✅ Environment configured" >> $GITHUB_STEP_SUMMARY

      - name: Test Alpaca Connection
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔌 Alpaca Connection Test" >> $GITHUB_STEP_SUMMARY

          python -c "
          import sys
          from pathlib import Path
          sys.path.insert(0, str(Path.cwd()))

          try:
              from paper_trading_alpaca import AlpacaMarketData

              # Test connection
              market_data = AlpacaMarketData()
              print('✅ Connected to Alpaca Paper Trading API')

              # Test getting a price
              price = market_data.get_latest_price('SPY')
              print(f'✅ SPY current price: \${price}')

              # Test multiple symbols
              symbols = ['AAPL', 'MSFT', 'GOOGL']
              for symbol in symbols:
                  price = market_data.get_latest_price(symbol)
                  print(f'   {symbol}: \${price}')

          except Exception as e:
              print(f'❌ Alpaca connection failed: {e}')
              import traceback
              traceback.print_exc()
              exit(1)
          "

          echo "✅ Alpaca connection successful" >> $GITHUB_STEP_SUMMARY

      - name: Paper Broker Integration Test
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Paper Broker Test" >> $GITHUB_STEP_SUMMARY

          python -c "
          import sys
          from decimal import Decimal
          from pathlib import Path

          sys.path.insert(0, str(Path.cwd()))

          from src.infrastructure.brokers.paper_broker import PaperBroker
          from src.domain.entities.order import Order, OrderSide, OrderType, OrderStatus
          from src.domain.value_objects import Quantity
          from uuid import uuid4
          from datetime import datetime, timezone

          # Initialize broker
          broker = PaperBroker(initial_capital=Decimal('100000'))
          broker.connect()

          # Test with real-like prices
          test_prices = {
              'AAPL': Decimal('175.50'),
              'MSFT': Decimal('425.25'),
              'GOOGL': Decimal('142.75')
          }

          orders_placed = 0
          orders_filled = 0

          for symbol, price in test_prices.items():
              broker.update_market_price(symbol, price)

              # Place buy order
              order = Order(
                  id=uuid4(),
                  symbol=symbol,
                  quantity=Quantity(Decimal('10')),
                  side=OrderSide.BUY,
                  order_type=OrderType.MARKET,
                  status=OrderStatus.PENDING,
                  created_at=datetime.now(timezone.utc)
              )

              result = broker.submit_order(order)
              orders_placed += 1

              if result and result.status == OrderStatus.FILLED:
                  orders_filled += 1
                  print(f'✅ {symbol} order filled at {price}')

          broker.disconnect()

          print(f'Orders placed: {orders_placed}')
          print(f'Orders filled: {orders_filled}')

          assert orders_filled == orders_placed, 'All orders should be filled'
          print('✅ Paper broker integration test passed')
          "

          echo "✅ Paper broker working correctly" >> $GITHUB_STEP_SUMMARY

      - name: Run Full Paper Trading Simulation
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🤖 Full Trading Simulation" >> $GITHUB_STEP_SUMMARY

          # Get inputs or use defaults
          ITERATIONS="${{ github.event.inputs.iterations || '10' }}"
          SYMBOLS="${{ github.event.inputs.symbols || 'AAPL,MSFT,GOOGL,AMZN,META' }}"

          echo "**Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Iterations: $ITERATIONS" >> $GITHUB_STEP_SUMMARY
          echo "- Symbols: $SYMBOLS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          python -c "
          import sys
          import json
          from decimal import Decimal
          from pathlib import Path
          import os

          sys.path.insert(0, str(Path.cwd()))

          iterations = int('$ITERATIONS')
          symbols = '$SYMBOLS'.split(',')

          # Check if we have API keys (skip if not in CI)
          if os.environ.get('ALPACA_API_KEY'):
              # Run with real Alpaca data
              from paper_trading_alpaca import AlpacaMarketData, AlpacaPaperTrader
              from src.infrastructure.brokers.paper_broker import PaperBroker

              broker = PaperBroker(initial_capital=Decimal('100000'))
              broker.connect()

              market_data = AlpacaMarketData()
              trader = AlpacaPaperTrader(broker, market_data, symbols)

              print(f'Starting paper trading: {iterations} iterations with {len(symbols)} symbols')
              trader.run(iterations=iterations, delay_seconds=1)

              # Load and display metrics
              if Path('smoke_test_metrics.json').exists():
                  with open('smoke_test_metrics.json') as f:
                      metrics = json.load(f)
                      print(f\"✅ Trading completed:\")
                      print(f\"   - Health checks passed: {metrics.get('health_checks_passed', 0)}\")
                      print(f\"   - Prices fetched: {metrics.get('prices_fetched', 0)}\")
                      print(f\"   - Orders submitted: {metrics.get('orders_submitted', 0)}\")
                      print(f\"   - Errors: {len(metrics.get('errors', []))}\")
          else:
              # Simulated trading without real API
              print('⚠️ Running in simulation mode (no API keys)')

              from src.infrastructure.brokers.paper_broker import PaperBroker
              from src.domain.entities.order import Order, OrderSide, OrderType, OrderStatus
              from src.domain.value_objects import Quantity
              from uuid import uuid4
              from datetime import datetime, timezone
              import random
              import time

              broker = PaperBroker(initial_capital=Decimal('100000'))
              broker.connect()

              metrics = {
                  'health_checks_passed': 0,
                  'prices_fetched': 0,
                  'orders_submitted': 0,
                  'orders_filled': 0,
                  'errors': []
              }

              for i in range(iterations):
                  print(f'Iteration {i+1}/{iterations}')

                  for symbol in symbols:
                      # Simulate price
                      base_price = Decimal(str(100 + random.uniform(-50, 150)))
                      broker.update_market_price(symbol, base_price)
                      metrics['prices_fetched'] += 1

                      # Random buy/sell decision
                      if random.random() > 0.3:  # 70% chance to trade
                          side = OrderSide.BUY if random.random() > 0.5 else OrderSide.SELL
                          quantity = Decimal(str(random.randint(1, 20)))

                          order = Order(
                              id=uuid4(),
                              symbol=symbol,
                              quantity=Quantity(quantity),
                              side=side,
                              order_type=OrderType.MARKET,
                              status=OrderStatus.PENDING,
                              created_at=datetime.now(timezone.utc)
                          )

                          try:
                              result = broker.submit_order(order)
                              metrics['orders_submitted'] += 1
                              if result and result.status == OrderStatus.FILLED:
                                  metrics['orders_filled'] += 1
                          except Exception as e:
                              metrics['errors'].append(str(e)[:100])

                      metrics['health_checks_passed'] += 1

                  time.sleep(0.1)  # Small delay between iterations

              broker.disconnect()

              # Save metrics
              with open('smoke_test_metrics.json', 'w') as f:
                  json.dump(metrics, f, indent=2)

              print(f\"✅ Simulation completed:\")
              print(f\"   - Health checks: {metrics['health_checks_passed']}\")
              print(f\"   - Prices fetched: {metrics['prices_fetched']}\")
              print(f\"   - Orders submitted: {metrics['orders_submitted']}\")
              print(f\"   - Orders filled: {metrics['orders_filled']}\")
              print(f\"   - Errors: {len(metrics['errors'])}\")
          "

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Paper trading simulation completed successfully" >> $GITHUB_STEP_SUMMARY

      - name: Performance Metrics
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Performance Metrics" >> $GITHUB_STEP_SUMMARY

          if [ -f smoke_test_metrics.json ]; then
            python -c "
            import json
            with open('smoke_test_metrics.json') as f:
                metrics = json.load(f)

                # Calculate rates
                total_checks = metrics.get('health_checks_passed', 0) + metrics.get('health_checks_failed', 0)
                if total_checks > 0:
                    success_rate = (metrics.get('health_checks_passed', 0) / total_checks) * 100
                else:
                    success_rate = 0

                orders_total = metrics.get('orders_submitted', 0) + metrics.get('orders_rejected', 0)
                if orders_total > 0:
                    fill_rate = (metrics.get('orders_submitted', 0) / orders_total) * 100
                else:
                    fill_rate = 100

                print(f'**Success Rate:** {success_rate:.1f}%')
                print(f'**Fill Rate:** {fill_rate:.1f}%')
                print(f'**Total Trades:** {metrics.get(\"orders_submitted\", 0)}')
                print(f'**Errors:** {len(metrics.get(\"errors\", []))}')

                if metrics.get('errors'):
                    print('\\n**Error Summary:**')
                    for i, error in enumerate(metrics['errors'][:5], 1):
                        print(f'{i}. {error}')
            " >> $GITHUB_STEP_SUMMARY
          else
            echo "No metrics file found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Trading Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: paper-trading-results-${{ github.run_id }}
          path: |
            smoke_test_metrics.json
            *.log

      - name: Create Issue on Failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString();
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Paper Trading Test Failed - ${date}`,
              body: `## Paper Trading Test Failure\n\n` +
                `The scheduled paper trading test has failed.\n\n` +
                `**Run:** [${context.runId}](${context.serverUrl}/` +
                `${context.repo.owner}/${context.repo.repo}/` +
                `actions/runs/${context.runId})\n` +
                `**Time:** ${date}\n\n` +
                `### Action Required\n` +
                `- [ ] Review the failure logs\n` +
                `- [ ] Check Alpaca API status\n` +
                `- [ ] Verify environment variables\n` +
                `- [ ] Fix any code issues`,
              labels: ['bug', 'paper-trading', 'automated']
            });

      - name: Final Status
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "### 🏁 Final Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Paper trading validation PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The paper trading system is functioning correctly." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Paper trading validation FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
