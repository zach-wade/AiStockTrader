name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.13'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: bandit -r src/ -f json -o bandit-report.json

      - name: Run Safety vulnerability check
        run: safety check --json --output safety-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Code Quality and Type Checking
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mypy ruff

      - name: Run MyPy type checking
        run: |
          mypy src --ignore-missing-imports --junit-xml mypy-report.xml

      - name: Run Ruff linting
        run: |
          ruff check src --format github
          ruff format src --check

      - name: Upload type check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: type-check-results
          path: mypy-report.xml

  # Comprehensive Test Suite
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, performance]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ai_trader_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-xdist pytest-benchmark

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest tests/unit \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=80 \
            --junit-xml=unit-test-results.xml \
            -n auto

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: ai_trader_test
          TEST_DB_USER: test_user
          TEST_DB_PASSWORD: test_password
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest tests/integration \
            --junit-xml=integration-test-results.xml \
            -v

      - name: Run performance tests
        if: matrix.test-type == 'performance'
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: ai_trader_test
          TEST_DB_USER: test_user
          TEST_DB_PASSWORD: test_password
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest tests/performance \
            --benchmark-json=performance-results.json \
            --junit-xml=performance-test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            *test-results.xml
            htmlcov/
            performance-results.json
            coverage.xml

  # Build and Test Docker Images
  docker-build:
    runs-on: ubuntu-latest
    needs: [security-scan, quality-check, test]
    if: success()

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and test production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker compose -f docker-compose.yml up -d postgres redis
          sleep 10
          docker compose run --rm test_runner
          docker compose down

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment commands here

  # Generate and publish reports
  publish-reports:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: '**/*test-results.xml'
          reporter: java-junit

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}

  # Nightly comprehensive check
  nightly-check:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run comprehensive health check
        run: |
          echo "Running nightly comprehensive check..."
          # Add comprehensive system health checks
          # Database migration tests
          # Performance regression tests
          # Security audit
          # Dependency vulnerability scan
