version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai_trader_db
    environment:
      POSTGRES_DB: ai_trader
      POSTGRES_USER: trader
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/infrastructure/database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - trading_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trader -d ai_trader"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai_trader_cache
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-cache_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Trading Application (Production)
  trading_app:
    build:
      context: .
      target: production
    container_name: ai_trader_app
    environment:
      - ENVIRONMENT=production
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=ai_trader
      - DATABASE_USER=trader
      - DATABASE_PASSWORD=${DB_PASSWORD:-secure_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-cache_password}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    ports:
      - "8000:8000"
      - "8080:8080"  # Dashboard
    networks:
      - trading_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development Environment
  trading_dev:
    build:
      context: .
      target: development
    container_name: ai_trader_dev
    environment:
      - ENVIRONMENT=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=ai_trader
      - DATABASE_USER=trader
      - DATABASE_PASSWORD=${DB_PASSWORD:-secure_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-cache_password}
      - LOG_LEVEL=DEBUG
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    volumes:
      - .:/app
      - dev_venv:/home/trading/.local
    ports:
      - "8001:8000"
      - "8081:8080"
      - "5678:5678"  # Debug port
    networks:
      - trading_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "-m", "src.main", "--mode", "paper", "--debug"]
    profiles: ["dev"]

  # Test Runner
  test_runner:
    build:
      context: .
      target: testing
    container_name: ai_trader_tests
    environment:
      - ENVIRONMENT=testing
      - TEST_DB_HOST=postgres
      - TEST_DB_PORT=5432
      - TEST_DB_NAME=ai_trader_test
      - TEST_DB_USER=trader
      - TEST_DB_PASSWORD=${DB_PASSWORD:-secure_password}
    volumes:
      - .:/app
      - test_coverage:/app/htmlcov
    networks:
      - trading_network
    depends_on:
      postgres:
        condition: service_healthy
    profiles: ["test"]

  # Monitoring (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_trader_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - trading_network
    profiles: ["monitoring"]

  grafana:
    image: grafana/grafana:latest
    container_name: ai_trader_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - trading_network
    depends_on:
      - prometheus
    profiles: ["monitoring"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_data:
    driver: local
  dev_venv:
    driver: local
  test_coverage:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
