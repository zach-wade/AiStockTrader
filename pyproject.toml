[tool.black]
line-length = 100
target-version = ["py311"]
include = "\.pyi?$"
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | data_lake
  | models
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "W",    # pycodestyle warnings
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "DTZ",  # flake8-datetimez
    "RUF",  # Ruff-specific rules
    "PL",   # Pylint
    "NPY",  # NumPy-specific rules
    "PD",   # pandas-vet
    "PERF", # Performance linting
    "S",    # flake8-bandit security
]
ignore = [
    "E203",  # Whitespace before ':'
    "E501",  # Line too long (handled by black)
    "B008",  # Do not perform function calls in argument defaults
    "B905",  # `zip()` without an explicit `strict=` parameter
    "S101",  # Use of assert detected
]
fix = true
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "data_lake",
    "models",
    "logs",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*" = ["S101", "ARG", "PLR2004"]
"scripts/*" = ["S101", "T201"]

[tool.ruff.isort]
known-first-party = ["main", "src"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
strict_equality = true
warn_unreachable = true
warn_no_return = true
ignore_missing_imports = true
exclude = [
    "build",
    "dist",
    "venv",
    ".venv",
    "tests",
    "data_lake",
    "models",
]
plugins = []

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v --disable-warnings --maxfail=1 --cov=src --cov-report=term-missing --cov-report=xml --cov-report=html"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "smoke: marks tests as smoke tests",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = ["B101", "B601"]
severity = "medium"

[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
show_missing = true
fail_under = 80
skip_covered = false
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["main", "src"]
skip_glob = ["*/venv/*", "*/.venv/*", "*/migrations/*"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true